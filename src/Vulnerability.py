"""
This module contains vulnerability object and relevant functions.
"""

from Node import *
from Network import *


class vulNode(node):
    """
    Create vulnerability object.
    """
    def __init__(self, name):
        super(vulNode, self).__init__(name)
        
        #privilege represent in what's kind the attacker can use the vulnerabilities, if it is too higher the attacker can not use
        self.privilege = None
        #Initialize value for input of the HARM more specifically, value like threaten level represent attack probability
        self.val = 0
        #Initialize name
        self.name = name
        #Indicate whether patchable (p) or non-patchable (np)
        self.type = None


    def __str__(self):
        return self.name

def createVulsWithoutType(node, metricValue, pri, name):
    """
    Create vulnerability network for node.

    :param node: node in the network which has vulnerabilities
    :param metricValue: assign a metric value to vulnerability (e.g. attack probability)
    :param pri: assign privilege value to vulnerability
    :param name: assign name to vulnerability
    :returns: none
    """
    
    #Instantiate vulnerability parameters
    vul = vulNode(name)
    vul.val = metricValue
    vul.privilege = pri
    vul.name = name
    
    #Create a vulnerability network for the node if node.vul is none
    if node.vul is None:
        node.vul = network()
        
    #Add vulnerability into the vulnerability network of node
    node.vul.nodes.append(vul)
    


def thresholdPri(node, t):
    """
    Set start point for the vulnerability network and link vulnerabilities to the start point.
    
    :param node: node in the network which has vulnerabilities
    :param t: privilege value for the start point
    :returns None
    """
    
    node.vul.s = vulNode('s')
    s = node.vul.s    
    del s.con[:]
    for v in node.vul.nodes:
        if v.privilege <= t:
            s.con.append(v)        
    return None


def terminalPri(node, t):
    """
    Set end point for the vulnerability network and link vulnerabilities to the end point.
    
    :param node: node in the network which has vulnerabilities
    :param t: privilege value for the end point
    :returns None
    """
    
    node.vul.e = vulNode('e')
    e = node.vul.e
    del e.con[:]
    for v in node.vul.nodes:
        if v.privilege >= t:
            v.con.append(e)
    return None
 




    